app: manga-scraper
org: tigaron
service: mangaScraper-api-series-chapters

frameworkVersion: '3'

custom:
  reducer:
    ignoreMissing: true
  prod:
    Stack: mangaScraper
    LogLevel: info
  dev:
    Stack: mangaScraper
    LogLevel: debug

provider:
  name: aws
  runtime: nodejs16.x
  memorySize: 128
  timeout: 10
  region: ap-southeast-1
  stage: ${opt:stage, 'dev'}
  apiGateway:
    restApiId:
      Fn::ImportValue: ${self:custom.${self:provider.stage}.Stack}-restApiId-${self:provider.stage}
    restApiRootResourceId:
      Fn::ImportValue: ${self:custom.${self:provider.stage}.Stack}-rootResourceId-${self:provider.stage}
    restApiResources:
      /series/{id}:
        Fn::ImportValue: ${self:custom.${self:provider.stage}.Stack}-ApiRootSeriesIdVar-${self:provider.stage}
  logRetentionInDays: 14
  environment:
    logLevel: ${self:custom.${self:provider.stage}.LogLevel}

package:
  individually: true

functions:
  SeriesChapters:
    handler: index.handler
    environment:
      region: ${aws:region}
      mangaTable: ${self:custom.${self:provider.stage}.Stack}-mangaTable-${self:provider.stage}
      scraperQueueUrl: https://sqs.${aws:region}.amazonaws.com/${aws:accountId}/${self:custom.${self:provider.stage}.Stack}-scraperQueue-${self:provider.stage}
    iamRoleStatementsName: ${self:service}-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:Query
        Resource:
          - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.${self:provider.stage}.Stack}-mangaTable-${self:provider.stage}
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource:
          - arn:aws:sqs:${aws:region}:${aws:accountId}:${self:custom.${self:provider.stage}.Stack}-scraperQueue-${self:provider.stage}
    events:
      - http:
          path: /series/{id}/chapters
          method: get
          cors: true
      - http:
          path: /series/{id}/chapters
          method: post
          cors: true
      - http:
          path: /series/{id}/chapters/{slug}
          method: get
          cors: true
      - http:
          path: /series/{id}/chapters/{slug}
          method: post
          cors: true

plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-common-excludes
  - serverless-plugin-reducer
