app: manga-scraper
org: tigaron
service: mangaScraper

frameworkVersion: '3'

custom:
  reducer:
    ignoreMissing: true
  prod:
    Stack: mangaScraper
    LogLevel: info
    MangaTableRCU: 10
    MangaTableWCU: 10
  dev:
    Stack: mangaScraper
    LogLevel: debug
    MangaTableRCU: 1
    MangaTableWCU: 1

provider:
  name: aws
  runtime: nodejs16.x
  region: ap-southeast-1
  stage: ${opt:stage, 'dev'}
  logRetentionInDays: 14
  environment:
    logLevel: ${self:custom.${self:provider.stage}.LogLevel}

package:
  individually: true

layers:
  chrome:
    name: chrome-aws-lambda
    description: '@sparticuz/chrome-aws-lambda'
    package:
      artifact: resources/layer/chrome-aws-lambda.zip

functions:
  Root:
    handler: src/_root/index.handler
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: /
          method: get
          cors: true
  Scraper:
    handler: src/scraper/index.handler
    layers:
      - !Ref ChromeLambdaLayer
    package:
      patterns:
        - '!node_modules\@sparticuz'
        - '!node_modules\puppeteer'
        - 'node_modules\puppeteer-core'
    memorySize: 2048
    timeout: 20
    environment:
      region: ${aws:region}
      mangaTable: ${self:custom.${self:provider.stage}.Stack}-mangaTable-${self:provider.stage}
      scraperQueueUrl: https://sqs.${aws:region}.amazonaws.com/${aws:accountId}/${self:custom.${self:provider.stage}.Stack}-scraperQueue-${self:provider.stage}
    iamRoleStatementsName: ${self:service}-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.${self:provider.stage}.Stack}-mangaTable-${self:provider.stage}
      - Effect: Allow
        Action:
          - sqs:ReceiveMessage
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
        Resource:
          - arn:aws:sqs:${aws:region}:${aws:accountId}:table/${self:custom.${self:provider.stage}.Stack}-scraperQueue-${self:provider.stage}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ScraperQueue
              - Arn
          batchSize: 1

resources:
  - ${file(resources/apigateway/RestApi.yml)}
  - ${file(resources/dynamodb/MangaTable.yml)}
  - ${file(resources/sqs/ScraperQueue.yml)}
  - Outputs:
      apiGatewayRestApiId:
        Value:
          Ref: ApiGatewayRestApi
        Export:
          Name: ${self:custom.${self:provider.stage}.Stack}-restApiId-${self:provider.stage}
      apiGatewayRestApiRootResourceId:
        Value:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        Export:
          Name: ${self:custom.${self:provider.stage}.Stack}-rootResourceId-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-common-excludes
  - serverless-plugin-reducer
